# app.py - Vercel-ready version with Rainforest API integration
import os
import time
import uuid
import json
from flask import Flask, request, jsonify
from flask_cors import CORS
import requests

# Load environment variables - try python-dotenv, but continue if not available for Vercel
try:
    from dotenv import load_dotenv
    load_dotenv()
    print("Loaded environment variables from .env file")
except ImportError:
    print("python-dotenv not installed, using environment variables directly")

app = Flask(__name__)
CORS(app)

class EmailService:
    def __init__(self):
        self.smtp_server = "smtp.gmail.com"
        self.smtp_port = 587
        # Get from environment variables
        self.email_user = os.environ.get('EMAIL_USER', '')
        self.email_password = os.environ.get('EMAIL_PASSWORD', '')
        self.admin_email = os.environ.get('ADMIN_EMAIL', 'LeeHanna8@gmail.com')
        
    def send_list_to_user(self, user_email: str, list_data: dict, list_url: str):
        """Send generated list to user's email"""
        if not self.email_user or not self.email_password:
            return False
            
        try:
            from email.mime.text import MIMEText
            from email.mime.multipart import MIMEMultipart
            import smtplib
            
            msg = MIMEMultipart('alternative')
            msg['Subject'] = f"Your AI-Researched Top 10 {list_data.get('category', 'Products')} List"
            msg['From'] = self.email_user
            msg['To'] = user_email
            
            html_content = f"""
            <html>
              <body style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                <h2 style="color: #232F3E;">{list_data['title']}</h2>
                <p>Here's your AI-researched Top 10 list!</p>
                <p><a href="{list_url}" style="background: #FF9900; color: white; padding: 10px 20px; text-decoration: none; border-radius: 4px;">View Full List Online</a></p>
                <hr>
                <p style="color: #666; font-size: 12px;">Generated by AI4U Top 10 Lists â€¢ {list_data['generated_at']}</p>
              </body>
            </html>
            """
            
            msg.attach(MIMEText(html_content, 'html'))
            
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls()
                server.login(self.email_user, self.email_password)
                server.send_message(msg)
                
            return True
        except Exception as e:
            print(f"Email error: {e}")
            return False
    
    def capture_email_lead(self, user_email: str, prompt: str):
        """Send captured email to admin"""
        if not self.email_user or not self.email_password:
            return False
            
        try:
            from email.mime.text import MIMEText
            import smtplib
            
            msg = MIMEText(f"""
New Top 10 List Generated!

User Email: {user_email}
Search Query: {prompt}
Generated At: {time.strftime('%Y-%m-%d %H:%M:%S')}

This user requested a Top 10 list and provided their email address.
            """)
            
            msg['Subject'] = "Top 10 emails - New Lead Captured"
            msg['From'] = self.email_user
            msg['To'] = self.admin_email
            
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls()
                server.login(self.email_user, self.email_password)
                server.send_message(msg)
                
            return True
        except Exception as e:
            print(f"Lead capture error: {e}")
            return False

class RainforestApiClient:
    def __init__(self, affiliate_id="ai4u0c-20"):
        self.affiliate_id = affiliate_id
        self.api_key = os.environ.get('RAINFOREST_API_KEY')
        
        if not self.api_key:
            raise ValueError("Rainforest API key not found in environment variables")
            
        self.base_url = "https://api.rainforestapi.com/request"
    
    def search_products(self, search_term, max_results=10):
        """Search Amazon products using Rainforest API"""
        params = {
            "api_key": self.api_key,
            "type": "search",
            "amazon_domain": "amazon.com",
            "search_term": search_term,
            "sort_by": "featured"
        }
        
        print(f"Searching Rainforest API for: {search_term}")
        
        try:
            response = requests.get(self.base_url, params=params)
            response.raise_for_status()  # Raise exception for HTTP errors
            
            data = response.json()
            
            if "search_results" not in data:
                raise ValueError(f"Invalid response from Rainforest API: {data.get('message', 'No search results found')}")
                
            products = []
            for item in data["search_results"][:max_results]:
                # Skip items without required data
                if not item.get("asin") or not item.get("title"):
                    continue
                    
                product = {
                    "asin": item.get("asin"),
                    "title": item.get("title"),
                    "price": item.get("price", {}).get("raw", "Price not available"),
                    "rating": item.get("rating", 0),
                    "affiliate_link": f"https://www.amazon.com/dp/{item.get('asin')}?tag={self.affiliate_id}",
                    "image_url": item.get("image", ""),
                    "description": item.get("title"),  # Use title as fallback description
                    "amazon_url": f"https://www.amazon.com/dp/{item.get('asin')}"
                }
                products.append(product)
                
            print(f"Found {len(products)} products for {search_term}")
            return products
            
        except requests.exceptions.RequestException as e:
            raise ConnectionError(f"Failed to connect to Rainforest API: {str(e)}")
        except (ValueError, KeyError) as e:
            raise ValueError(f"Error processing Rainforest API response: {str(e)}")
        except Exception as e:
            raise Exception(f"Unexpected error with Rainforest API: {str(e)}")

class ProductListGenerator:
    def __init__(self):
        try:
            self.api_client = RainforestApiClient()
        except ValueError as e:
            # Re-raise with more specific message for initialization
            raise ValueError(f"Failed to initialize Rainforest API client: {str(e)}")
    
    def intelligent_category_analysis(self, prompt):
        """Determine the best search terms based on prompt"""
        prompt_lower = prompt.lower()
        
        # Food & Grocery
        if any(word in prompt_lower for word in ['food', 'snack', 'chips', 'candy', 'coffee', 'tea', 'organic', 'grocery']):
            return {'category': 'grocery', 'search_terms': f"{prompt} food"}
        
        # Baby & Kids
        if any(word in prompt_lower for word in ['baby', 'diaper', 'infant', 'toddler', 'kids', 'children']):
            return {'category': 'baby', 'search_terms': f"{prompt} baby"}
        
        # Beauty & Personal Care
        if any(word in prompt_lower for word in ['skincare', 'beauty', 'makeup', 'cosmetic', 'anti-aging']):
            return {'category': 'beauty', 'search_terms': f"{prompt} beauty"}
        
        # Electronics
        if any(word in prompt_lower for word in ['phone', 'smartphone', 'laptop', 'headphone', 'gaming']):
            return {'category': 'electronics', 'search_terms': prompt}
        
        # Default
        return {'category': 'general', 'search_terms': prompt}
    
    def generate_top10_list(self, prompt):
        """Generate a complete Top 10 list using Rainforest API"""
        try:
            category_info = self.intelligent_category_analysis(prompt)
            products = self.api_client.search_products(category_info['search_terms'], max_results=10)
            
            if not products:
                return {
                    'success': False,
                    'error': f"No products found for '{prompt}'. Please try a different search term."
                }
            
            # Ensure we have up to 10 products (but could be fewer if API returns fewer)
            products = products[:10]
            
            list_title = f"Top 10 {prompt.title()} - AI-Researched & Endorsed 2025"
            intro_text = f"Our AI has analyzed hundreds of {prompt.lower()} to bring you this definitive Top 10 list. Each product has been evaluated based on customer reviews, ratings, and overall quality."
            
            return {
                'success': True,
                'title': list_title,
                'intro': intro_text,
                'category': category_info['category'],
                'products': products,
                'generated_at': time.strftime('%Y-%m-%d %H:%M:%S'),
                'affiliate_id': self.api_client.affiliate_id
            }
            
        except ValueError as e:
            return {'success': False, 'error': str(e)}
        except ConnectionError as e:
            return {'success': False, 'error': f"Connection error: {str(e)}"}
        except Exception as e:
            return {'success': False, 'error': f"Failed to generate list: {str(e)}"}

# API Routes
@app.route('/api/generate-list', methods=['POST'])
def generate_list():
    print(f"Received request at /api/generate-list with method {request.method}")
    try:
        data = request.json
        print(f"Request data: {json.dumps(data)}")
        
        prompt = data.get('prompt', '').strip()
        user_email = data.get('email', '').strip()
        
        if not prompt:
            return jsonify({'success': False, 'error': 'Prompt is required'}), 400
        
        try:
            generator = ProductListGenerator()
        except ValueError as e:
            return jsonify({'success': False, 'error': str(e)}), 500
            
        result = generator.generate_top10_list(prompt)
        
        if result['success']:
            # Generate unique URL
            list_id = str(uuid.uuid4())[:8]
            list_url = f"https://ai4u-top10-lists.vercel.app/list/{list_id}"
            result['share_url'] = list_url
            result['list_id'] = list_id
            
            # Handle email if provided
            if user_email:
                email_service = EmailService()
                email_service.send_list_to_user(user_email, result, list_url)
                email_service.capture_email_lead(user_email, prompt)
        
        return jsonify(result)
        
    except Exception as e:
        error_message = str(e)
        print(f"Error in generate_list: {error_message}")
        return jsonify({'success': False, 'error': error_message}), 500

@app.route('/api/health', methods=['GET'])
def health_check():
    api_key = os.environ.get('RAINFOREST_API_KEY', '')
    if not api_key:
        return jsonify({
            'status': 'warning',
            'message': 'AI4U Top 10 Lists API v2.0 - Rainforest API key not configured',
            'affiliate_id': 'ai4u0c-20'
        }), 200
    
    return jsonify({
        'status': 'healthy',
        'message': 'AI4U Top 10 Lists API v2.0 - Rainforest API configured',
        'affiliate_id': 'ai4u0c-20'
    })

@app.route('/', methods=['GET'])
def home():
    return "AI4U Top 10 Backend is running!"

# Test route to verify API connection
@app.route('/test', methods=['GET'])
def test_page():
    return '''
    <html>
    <head>
        <title>AI4U API Test</title>
        <style>
            body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
            .form-group { margin-bottom: 15px; }
            label { display: block; margin-bottom: 5px; }
            input[type="text"] { width: 100%; padding: 8px; }
            button { background: #4CAF50; color: white; padding: 10px 15px; border: none; cursor: pointer; }
            pre { background: #f4f4f4; padding: 15px; overflow: auto; }
        </style>
    </head>
    <body>
        <h1>AI4U Top 10 API Test</h1>
        <div class="form-group">
            <label for="prompt">Search Term:</label>
            <input type="text" id="prompt" value="vitamins" />
        </div>
        <div class="form-group">
            <label for="email">Email (optional):</label>
            <input type="text" id="email" value="" />
        </div>
        <button onclick="testAPI()">Test API</button>
        <h2>Results:</h2>
        <pre id="results">Results will appear here...</pre>

        <script>
            async function testAPI() {
                const prompt = document.getElementById('prompt').value;
                const email = document.getElementById('email').value;
                const resultsElement = document.getElementById('results');
                
                resultsElement.textContent = 'Loading...';
                
                try {
                    const response = await fetch('/api/generate-list', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            prompt: prompt,
                            email: email
                        })
                    });
                    
                    const data = await response.json();
                    resultsElement.textContent = JSON.stringify(data, null, 2);
                } catch (error) {
                    resultsElement.textContent = 'Error: ' + error.message;
                }
            }
        </script>
    </body>
    </html>
    '''

# Vercel needs this
if __name__ == '__main__':
    print("Starting AI4U Top 10 Backend with Rainforest API integration")
    print(f"API Key configured: {'Yes' if os.environ.get('RAINFOREST_API_KEY') else 'No'}")
    app.run(debug=True)